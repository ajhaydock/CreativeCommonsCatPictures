version: "3"

services:
  # I'll switch this out for dnsproxy once it does DNSSEC properly
  cloudflared:
    container_name: cloudflared
    image: registry.gitlab.com/alexhaydock/dockerfiles/cloudflared:latest
    hostname: cloudflared.darkwebkittens.xyz
    expose:
      # DNS
      - "5053/tcp"
      - "5053/udp"
    restart: unless-stopped
    networks:
      pihole_net:
        ipv4_address: 10.0.0.2
        ipv6_address: 2001:3200:3200::20

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole.darkwebkittens.xyz
    depends_on:
      - cloudflared
    ports:
      # Listen globally for DNS queries
      # This makes it easier for us to deal with VPN setup, rather than listening on 127.0.0.1 which doesn't work
      # Obvious caveat is that we need to actually firewall this port, but I'm letting Amazon Security Groups handle that
      - "0.0.0.0:53:53/tcp"
      - "0.0.0.0:53:53/udp"
      # Access Pi-Hole WebUI locally with: 'ssh ubuntu@wg.darkwebkittens.xyz -L 3141:127.0.0.1:3141'
      - "127.0.0.1:3141:3141/tcp"
    environment:
      TZ: 'Europe/London'
      WEBPASSWORD: 'correct-horse-battery-staple'
      DNS1: '10.0.0.2#5053'
      DNS2: 'no'
      # We don't want this since cloudflared handles DNSSEC further upstream.
      DNSSEC: 'false'
      DNSMASQ_LISTENING: 'all'
      IPv6: 'true'
      # The two ENV vars below are needed to stop the WebUI breaking when we use it on a port other than the default (:80)
      VIRTUAL_HOST: '127.0.0.1:3141'
      WEB_PORT: '3141'
    dns:
      - 127.0.0.1
      - 1.1.1.1
    volumes:
       - '/home/ubuntu/pihole/etc-pihole/:/etc/pihole/'
       - '/home/ubuntu/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/'
    restart: unless-stopped
    networks:
      pihole_net:
        ipv4_address: 10.0.0.3
        ipv6_address: 2001:3200:3200::30

  nginx-doh-public:
    image: nginx:stable-alpine
    container_name: nginx-doh
    hostname: wg.darkwebkittens.xyz
    depends_on:
      - cloudflared
      - pihole
    volumes:
      - '/home/ubuntu/certs/:/certs/:ro'
      - '/home/ubuntu/compose/nginx-public-resolver.conf:/etc/nginx/nginx.conf:ro'
      # git clone https://github.com/TuxInvader/nginx-dns.git /home/ubuntu/compose/nginx-dns
      - '/home/ubuntu/compose/nginx-dns/njs.d:/etc/nginx/njs.d:ro'
    ports:
      - "0.0.0.0:443:443/tcp"
    restart: unless-stopped
    networks:
      pihole_net:
        ipv4_address: 10.0.0.4
        ipv6_address: 2001:3200:3200::40

networks:
  pihole_net:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/24
        - subnet: 2001:3200:3200::/64