# Linters
ansible-lint:
  image: python:3
  stage: .pre
  script:
    - python3 -m pip install ansible-lint
    - ansible-lint __deployment/playbook.yml

docker-lint:
  image: projectatomic/dockerfile-lint
  stage: test
  script:
    - dockerfile_lint -f Dockerfile

terraform-lint:
  image: alpine:latest
  stage: .pre
  script:
    - apk --no-cache add curl unzip
    - cd __deployment
    - curl -L "$(curl -Ls https://api.github.com/repos/terraform-linters/tflint/releases/latest | grep -o -E "https://.+?_linux_amd64.zip")" -o tflint.zip
    - unzip tflint.zip
    - rm tflint.zip
    - chmod +x tflint
    - ./tflint

# Docker buildx for multiplatform
buildx:
  image: docker:stable-git
  stage: .pre
  variables:
    GIT_STRATEGY: none
  artifacts:
    paths:
      - buildx
    expire_in: 1 hour
  services:
    - docker:stable-dind
  script:
    - export DOCKER_BUILDKIT=1
    - git clone git://github.com/docker/buildx ./docker-buildx
    - docker build --platform=local -o . ./docker-buildx

# Run build
build:
  image: docker:stable
  stage: .pre
  services:
    - name: docker:stable-dind
      command: ["--experimental"]
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - mv buildx ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker buildx create --use --name mybuilder
    - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --push -t $CI_REGISTRY_IMAGE .