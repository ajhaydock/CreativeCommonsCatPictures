---
- hosts: all
  name: Configure Terraform Host
  gather_facts: true

  tasks:
    - name: Update Apt packages
      become: yes
      apt:
        autoremove: yes
        update_cache: yes
        upgrade: full

    - name: Reboot instance after updates
      become: yes
      reboot:

    - name: Wait for it to come back
      wait_for_connection:
        delay: 60
        timeout: 300

    - name: Install Docker & Pip (via Apt)
      become: yes
      apt:
        name:
          - 'docker.io'
          - 'python3-pip'
        state: present

    - name: Install Docker Python API and Docker Compose (via Pip)
      become: yes
      pip:
        name:
          - docker
          - docker-compose
        state: latest

    - name: Pull site container
      become: yes
      docker_image:
        name: registry.gitlab.com/alexhaydock/darkwebkittens.xyz
        source: pull

    - name: Start site container
      become: yes
      docker_container:
        name: darkwebkittens.xyz
        image: registry.gitlab.com/alexhaydock/darkwebkittens.xyz
        state: started
        restart: yes
        ports:
          - "80:80/tcp"

    - name: Copy onion keys etc. to EC2 instance
      copy:
        src: ~/.ssh/darkwebkittens/
        dest: /home/ubuntu/darkwebkittens/

    - name: Deploy onion service
      become: yes
      docker_compose:
        project_src: /home/ubuntu/darkwebkittens/
        build: yes
        nocache: yes
        recreate: always
        restarted: yes
        state: present

    - name: Pull obfs4-bridge container
      become: yes
      docker_image:
        name: phwinter/obfs4-bridge
        source: pull

    # For obfs4 I'm currently using the default ports for Steam and Minecraft.
    # On AWS this might let us blend in a bit.
    - name: Start obfs4-bridge container
      become: yes
      docker_container:
        name: obfs4-bridge
        image: phwinter/obfs4-bridge
        state: started
        restart: yes
        env: "OR_PORT=27015 PT_PORT=25565 EMAIL=alex@alexhaydock.co.uk"

    - name: Read the obfs4 relay hash from the running container
      become: yes
      command: docker exec -i obfs4-bridge cat /var/lib/tor/hashed-fingerprint
      register: obfs4_hash

    - name: Read the onion service address from the running container
      become: yes
      command: docker exec -i kittens-tor cat /opt/onion/hostname
      register: onion_hostname

    - name: Get public IP for the AWS instance
      ipify_facts:

    - debug:
        msg: "âœ… Your new instance is available at http://aws.darkwebkittens.xyz or http://{{ ipify_public_ip }}"

    - debug:
        msg: "ðŸ§… The onion service should also be available at http://{{ onion_hostname.stdout }}"

    - debug:
        msg: "ðŸ§… Your obfs4 bridge's name and fingerprint are: {{ obfs4_hash.stdout }}. After a few hours your bridge should be visible with this hash on: https://metrics.torproject.org"
...
